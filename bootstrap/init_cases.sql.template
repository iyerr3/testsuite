SET SEARCH_PATH = $$$benchmark$$$ ;

DROP TABLE IF EXISTS analyticstool CASCADE;
DROP TABLE IF EXISTS testitems CASCADE;
DROP TABLE IF EXISTS testsuites CASCADE;
DROP TABLE IF EXISTS testitemresultbaseline CASCADE;
DROP TABLE IF EXISTS madlib_jiras CASCADE;
DROP TABLE IF EXISTS jiras_cases CASCADE;
CREATE TABLE testitemresultbaseline(
       itemname            text,
       algorithmic         text,
       method              text,
       elapsedtime         bigint,
       evaluation_function float,
       issuccessful        bool,
       result_info         text,
       analysis_tool       varchar(128));

CREATE TABLE testsuites(
       suitename       text,
       testtype        text,
       casenum         int,
       comments        text,
       sameparameters  text,
       primary key(suitename));

CREATE TABLE testitems(
       itemname        text,
       suitename       text,
       casename        text,
       algorithmic     text,
       method          text,
       parameters      text,
       varyparavalue   text,
       varyparaname    text,
       dataset         text,
       rownum          int,
       primary key(itemname));

CREATE TABLE madlib_jiras(
       jiraid   varchar(20),
       jiratype smallint,
       jiradescription text);
CREATE TABLE jiras_cases(
        jiraid  varchar(20),
        casename varchar(150));


CREATE OR REPLACE VIEW testresultreport AS
(
SELECT runid, ti.algorithmic as suitename, ti.casename,
 CASE WHEN trb.itemname IS NOT NULL
      THEN trb.itemname
      ELSE tr.itemname
 END AS itemname,
      tr.command as command,
 CASE
    WHEN tr.issuccessful IS NULL
    THEN 'SKIPPED'

    -- the below implies that if a test is not present in trb then it will be
    --   marked as skipped
    WHEN trb.itemname IS NULL
    THEN 'NEW CASES'

    WHEN tr.itemname IS NULL OR ti.itemname IS NULL
    THEN 'FAILED : NO RESULT OR REMOVE CASE FILE'

    WHEN tr.itemname like 'svm_%predict_score%' AND resultlocation like 'PG%'
       THEN CASE
                WHEN tr.issuccessful = trb.issuccessful
                  OR tr.result_info like '%list index out of range%'
                THEN 'PASSED'
                ELSE 'FAILED'
            END

    WHEN  trb.issuccessful <> tr.issuccessful OR 
          (  trb.evaluation_function IS NOT NULL AND
             tr.evaluation_function IS NULL
          )
    THEN 'FAILED'

    WHEN  trb.evaluation_function = 0 AND tr.evaluation_function = 0
    THEN 'PASSED'

         WHEN tr.itemname like 'lda_compare_perplexity%compare_perplexity%'
      THEN
        CASE WHEN tr.issuccessful = true and tr.evaluation_function > 0
        THEN 'PASSED'
        ELSE 'FAILED'
        END

      WHEN tr.itemname in (
        'lda_basic_function_nips_0_0_lda_train_0',
 	    'lda_basic_function_nips_0_0_lda_predict_1',
		'lda_basic_function_nytimes_0_0_lda_train_0',
	 	'lda_basic_function_nytimes_0_0_lda_predict_1',
		'lda_datatable_checking_0_2_lda_train_0',
		'lda_datatable_checking_0_3_lda_train_0',
		'lda_datatable_checking_0_4_lda_train_0',
		'lda_vocsize_checking_0_1_lda_train_0',
		'lda_iternum_checking_0_1_lda_train_0',
		'lda_toy_gen_model_for_pred_parameter_checking_0_0_lda_train_0',
		'lda_datatable_checking_pred_0_2_lda_predict_0', 
		'lda_datatable_checking_pred_0_3_lda_predict_0', 
		'lda_datatable_checking_pred_0_4_lda_predict_0') 
      THEN 
        CASE WHEN tr.issuccessful = true and (
            tr.result_info LIKE '%model table%output data table%' OR 
            tr.result_info LIKE '%per-doc topic distribution and per-word topic assignments%')
        THEN
            'PASSED'
        ELSE
            'FAILED'
        END

      WHEN tr.itemname in (
		'lda_datatable_checking_0_0_lda_train_0',
		'lda_datatable_checking_0_1_lda_train_0',
		'lda_datatable_checking_0_5_lda_train_0',
		'lda_modeltable_checking_0_0_lda_train_0',
		'lda_outdatatable_checking_0_0_lda_train_0',
		'lda_vocsize_checking_0_0_lda_train_0',
		'lda_topicnum_checking_0_0_lda_train_0',
		'lda_topicnum_checking_0_1_lda_train_0',
		'lda_iternum_checking_0_0_lda_train_0',
		'lda_alpha_checking_0_0_lda_train_0',
		'lda_alpha_checking_0_1_lda_train_0',
		'lda_beta_checking_0_0_lda_train_0',
		'lda_beta_checking_0_1_lda_train_0',
		'lda_datatable_checking_pred_0_0_lda_predict_0',
		'lda_datatable_checking_pred_0_1_lda_predict_0',
		'lda_datatable_checking_pred_0_5_lda_predict_0',
		'lda_modeltable_checking_pred_0_0_lda_predict_0',
		'lda_outdatatable_checking_pred_0_0_lda_predict_0'
		)
      THEN 
        CASE WHEN tr.issuccessful = false and (
            tr.result_info LIKE '%invalid argument%' OR
            tr.result_info LIKE '%rows have zero or negative count%' OR
            tr.result_info LIKE '%rows have negative wordid%%' OR
            tr.result_info LIKE '%the actual size of vocabulary % is larger than the specified %')
        THEN
            'PASSED'
        ELSE
            'FAILED'
        END

      WHEN tr.itemname in (
		'lda_datatable_checking_0_6_lda_train_0', 
		'lda_modeltable_checking_0_1_lda_train_0',
		'lda_outdatatable_checking_0_1_lda_train_0',
		'lda_datatable_checking_pred_0_6_lda_predict_0',
		'lda_modeltable_checking_pred_0_1_lda_predict_0', 
		'lda_outdatatable_checking_pred_0_1_lda_predict_0'
	  )
      THEN 
		CASE WHEN tr.issuccessful = true and tr.result_info = '(No rows)' 
        THEN
            'PASSED'
        ELSE
            'FAILED'
        END


    WHEN tr.itemname like 'cv_null_%'
    THEN
      CASE WHEN tr.issuccessful = trb.issuccessful
      AND (   tr.result_info like '%CV error: You have unsupported Null%'
        OR  tr.result_info like '%CV error: Cross validation total fold number%'
        OR  tr.result_info like '%CV error: The number of parameters%'
        OR  tr.result_info like '%CV error: Is the data row ID random?%'
        OR  tr.result_info like '%syntax error at or near%'
        OR  tr.result_info like '%column "unknown" does not exist%'
        OR  tr.result_info like '%column "unknown" does not exist%'
        )
    THEN 'PASSED'
    ELSE 'FAILED'
    END

    WHEN tr.itemname like 'generalcv_linregr_output_test%'
    THEN
        CASE  WHEN tr.issuccessful = true and tr.evaluation_function > 0
              THEN 'PASSED'
              ELSE 'FAILED'
        END

    WHEN tr.itemname like 'generalcv_logregr_output_test%'
    THEN
        CASE WHEN tr.issuccessful = true and tr.evaluation_function > 0
             THEN 'PASSED'
             ELSE 'FAILED'
        END

    WHEN tr.itemname like 'ridge_regression_output_test%'
    THEN
        CASE WHEN tr.issuccessful = true and tr.evaluation_function < 1e-4
        THEN 'PASSED'
        ELSE 'FAILED'
        END


    WHEN tr.itemname like 'linear_regression%'
    THEN
        CASE  WHEN tr.issuccessful = trb.issuccessful
              THEN 'PASSED'
              ELSE 'FAILED'
        END

    WHEN tr.itemname like 'logregr_output%eval_logregr_train%'
    THEN CASE WHEN tr.issuccessful and tr.evaluation_function = 100
    THEN 'PASSED'
    ELSE 'FAILED'
    END

    WHEN tr.itemname like 'logistic_regression'
    THEN
      CASE  WHEN tr.itemname like 'logistic_regression_negative%'
            THEN CASE WHEN NOT tr.issuccessful
                  THEN CASE WHEN tr.result_info like '%Logregr error%'
                              OR tr.result_info like '%column%does not exist%'
                            THEN 'PASSED'
                            ELSE 'FAILED'
                        END
                  ELSE 'FAILED'
                END
            ELSE
              CASE WHEN tr.issuccessful
                   THEN 'PASSED'
                   ELSE CASE WHEN tr.result_info like '%Logregr error%'
                              OR tr.result_info like '%column%does not exist%'
                              OR tr.result_info like '%Over- or underflow in Newton step%'
                        THEN 'PASSED'
                        ELSE 'FAILED'
                        END
              END
      END

    WHEN tr.itemname like 'linregr_hetero_output_test%linregr_eval_hetero%'
    THEN CASE WHEN    tr.issuccessful
                and   tr.evaluation_function = 1
              THEN 'PASSED'
              ELSE 'FAILED'
         END

    WHEN tr.itemname in ('linregr_grouping_output_test_0_0_linregr_eval_grouping_0',
        'linregr_grouping_output_test_0_1_linregr_eval_grouping_0')
    THEN CASE WHEN  tr.issuccessful
                and tr.evaluation_function = 1
              THEN 'PASSED'
              ELSE 'FAILED'
           END

    WHEN      tr.itemname like 'km_%negative%'
    THEN  CASE WHEN tr.issuccessful = trb.issuccessful
            THEN 'PASSED'
            ELSE 'FAILED'
          END

    WHEN tr.itemname in ('km_nonfinite_2water_treatment_noninfinite_0_0_km_default_fndist_aggcentroid_maxiter_minfrac_0',
        'km_pp_noninfinite_0_1_km_pp_default_fndist_aggcentroid_maxiter_minfrac_0',
        'km_random_noninfinite_0_1_km_random_default_fndist_aggcentroid_maxiter_minfrac_0')
        THEN CASE WHEN tr.issuccessful = false and
              (   tr.result_info like '%relation "madlibtestdata.non_existing_table" does not exist%'
               or tr.result_info like '%Point coordinates (pid) are not a valid type%'
               or tr.result_info like '%schema "non_existing_schema" does not exist%'
               or tr.result_info like '%function "madlib.non_existing_squared_dist_func(DOUBLE PRECISION[], DOUBLE PRECISION[])" does not exist%'
               or tr.result_info like '%function "madlibtestdata.squared_dist_invalid_signature_datatype(DOUBLE PRECISION[], DOUBLE PRECISION[])" does not exist%'
               or tr.result_info like '%function "madlibtestdata.squared_dist_invalid_signature_numparam(DOUBLE PRECISION[], DOUBLE PRECISION[])" does not exist%'
               or tr.result_info like '%invalid input syntax for type double precision%'
               or tr.result_info like '%cannot concatenate incompatible arrays%'
               or tr.result_info like '%Arrays with differing element dimensions are not compatible for concatenation%'
               or tr.result_info like '%_madlib_km_us_census_1990_filtered%'
               or tr.result_info like '%Number of centroids is greater than number of points%'
               or tr.result_info like '%Number of iterations must be a non-negative integer%'
               or tr.result_info like '%Convergence threshold is not a valid value (must be a fraction between 0 and 1)%'
               or tr.result_info like '%Number of clusters k must be a positive integer%'
               or tr.result_info like 'function madlib.kmeans%does not exist'
              )
            THEN 'PASSED'
            ELSE 'FAILED'
            END
     WHEN tr.itemname in ('km_maxnumiterations_0_0_km_default_fndist_aggcentroid_maxiter_0',
          'km_maxnumiterations_0_1_km_default_fndist_aggcentroid_maxiter_0',
          'km_maxnumiterations_0_2_km_default_fndist_aggcentroid_maxiter_0',
          'km_minfracreassigned_0_0_km_default_fndist_aggcentroid_maxiter_minfrac_0',
          'km_minfracreassigned_0_1_km_default_fndist_aggcentroid_maxiter_minfrac_0',
          'km_minfracreassigned_0_2_km_default_fndist_aggcentroid_maxiter_minfrac_0',
          'km_pp_maxnumiterations_0_0_km_pp_default_fndist_aggcentroid_maxiter_0',
          'km_pp_maxnumiterations_0_1_km_pp_default_fndist_aggcentroid_maxiter_0',
          'km_pp_maxnumiterations_0_2_km_pp_default_fndist_aggcentroid_maxiter_0',
          'km_pp_minfracreassigned_0_0_km_pp_default_fndist_aggcentroid_maxiter_minfrac_0',
          'km_pp_minfracreassigned_0_1_km_pp_default_fndist_aggcentroid_maxiter_minfrac_0',
          'km_pp_minfracreassigned_0_2_km_pp_default_fndist_aggcentroid_maxiter_minfrac_0',
          'km_random_maxnumiterations_0_0_km_random_default_fndist_aggcentroid_maxiter_0',
          'km_random_maxnumiterations_0_1_km_random_default_fndist_aggcentroid_maxiter_0',
          'km_random_maxnumiterations_0_2_km_random_default_fndist_aggcentroid_maxiter_0',
          'km_random_minfracreassigned_0_0_km_random_default_fndist_aggcentroid_maxiter_minfrac_0',
          'km_random_minfracreassigned_0_1_km_random_default_fndist_aggcentroid_maxiter_minfrac_0',
          'km_random_minfracreassigned_0_2_km_random_default_fndist_aggcentroid_maxiter_minfrac_0'
        )
        THEN
             CASE WHEN  tr.issuccessful = trb.issuccessful
                  THEN 'PASSED'
                  ELSE 'FAILED'
                  END

        WHEN tr.itemname like 'km_%' and tr.itemname not like '%negative%'
        THEN CASE
                  WHEN tr.issuccessful = false
                  THEN
                       CASE WHEN tr.itemname = 'km_default_4watertreatment_0_0_km_default_0'
                             and tr.result_info like '%At least one initial centroid has non-finite values%'
                            THEN 'PASSED'
                            ELSE 'FAILED'
                            END
                  WHEN  trb.evaluation_function IS NOT NULL
                    AND tr.evaluation_function IS NOT NULL
                    THEN
                      CASE WHEN tr.evaluation_function IS NULL
                      THEN 'FAILED'
                      WHEN tr.evaluation_function='NaN' and trb.evaluation_function='NaN'
                      THEN 'PASSED'
                      WHEN (trb.evaluation_function - tr.evaluation_function) > 0.3
                      THEN 'FAILED'
                      WHEN (tr.evaluation_function - trb.evaluation_function) > 0.3
                      THEN 'FAILED'
                      ELSE 'PASSED'
                      END
                  WHEN tr.result_info = trb.result_info
                       THEN 'PASSED'
                  ELSE 'FAILED'
               END

    -- Naive Bayes
    WHEN (tr.itemname like 'nb_%test_calculate_accuracy%')
    THEN  CASE  WHEN    tr.issuccessful = true
                    AND tr.result_info >= trb.result_info
                THEN 'PASSED'
                ELSE 'FAILED'
          END
    WHEN (tr.itemname like 'nb_precompute_views_0_0%'
         or tr.itemname like 'nb_precompute_views_0_4%'
         or tr.itemname like 'nb_precompute_function_workaround_0_0%'
         or tr.itemname like 'nb_precompute_function_workaround_0_4%')
          THEN CASE WHEN tr.issuccessful = true
                    THEN 'PASSED'
                    WHEN tr.issuccessful = false
                      AND (tr.result_info LIKE '%column "value" contains null values%'
                       OR tr.result_info like '%does not exist%'
                       OR tr.result_info like '%line 19 at % statement%')
                    THEN 'PASSED'
                    ELSE 'FAILED'
               END
    WHEN  ( tr.itemname like 'svm_cls_dot_ds_0_7%' OR 
            tr.itemname like 'svm_cls_dot_ds_0_15%' OR 
            tr.itemname like 'svm_cls_polynomial_ds_0_7%' OR 
            tr.itemname like 'svm_cls_polynomial_ds_0_15%' OR 
            tr.itemname like 'svm_cls_gaussian_ds_0_7%' OR 
            tr.itemname like 'svm_cls_gaussian_ds_para_0_7%'OR 
            tr.itemname like 'svm_reg_dot_ds_0_4%' OR 
            tr.itemname like 'svm_reg_dot_ds_0_18%' OR 
            tr.itemname like 'svm_reg_polynomial_ds_0_4%'OR 
            tr.itemname like 'svm_reg_polynomial_ds_0_18%' OR 
            tr.itemname like 'svm_reg_gaussian_ds_0_4%' OR 
            tr.itemname like 'svm_reg_gaussian_ds_para_0_4%'
          ) AND 
          tr.itemname not like 'svm_%_3'
          THEN CASE WHEN  ( tr.itemname not like '%0' AND 
                            tr.issuccessful = false
                          ) OR 
                          ( tr.itemname like '%0' AND 
                            tr.result_info LIKE '%the maximum number of features is 102400%')
               THEN 'PASSED'
               ELSE 'FAILED'
               END

      WHEN  ( trb.evaluation_function = 0 AND 
              tr.evaluation_function <> 0) OR 
            ( trb.evaluation_function <> 0 AND 
              tr.evaluation_function = 0)
      THEN  CASE WHEN trb.itemname like 'svm_%predict_score%'  THEN 'PASSED'
                  ELSE 'FAILED'
                  END
 
      WHEN  trb.itemname not like 'rf%' AND 
            trb.itemname not like '%cross_validate%' AND 
            trb.itemname not like 'svm%' AND 
            trb.itemname not like 'multinomia%' AND  
            trb.evaluation_function IS NOT NULL AND 
            (trb.evaluation_function - tr.evaluation_function) > 0.0001
      THEN 'FAILED : Evaluation function such as score, gof decreased: baseline is '::text  || 
            ((trb.evaluation_function)::decimal(6,5))::text  || 
            ' and runtime is '::text  || 
            ((tr.evaluation_function)::decimal(6,5))::text

      -- random forest
      WHEN  ( trb.itemname like 'rf%'  OR  
              trb.itemname like '%cross_validate%' OR 
              trb.itemname  like 'multinomia%') AND 
            trb.evaluation_function IS NOT NULL AND 
            (tr.evaluation_function / trb.evaluation_function) < 0.7
      THEN 'FAILED : Evaluation function decreased: baseline is '::text  || 
          ((trb.evaluation_function)::decimal(6,5))::text  || 
          ' and runtime is '::text  || 
          ((tr.evaluation_function)::decimal(6,5))::text


      WHEN  trb.itemname like 'svm%' AND 
            trb.evaluation_function IS NOT NULL AND 
            (tr.evaluation_function / trb.evaluation_function) < 0.0000001
      THEN 'FAILED : Evaluation function of support vecotr machines decreased: baseline is '::text  || 
            (trb.evaluation_function)::text  || 
            ' and runtime is '::text  || 
            (tr.evaluation_function)::text

      WHEN  trb.issuccessful = tr.issuccessful AND 
              ( trb.itemname like 'kmeans_%' OR 
                trb.itemname like 'multinomial_%' OR 
                trb.itemname like 'logistic_%'  OR 
                trb.itemname like 'linear_%' OR 
                trb.itemname like '%_c45_display%' OR 
                trb.itemname like 'svm_%0' OR 
                ( trb.itemname like 'rf%' AND 
                  trb.itemname not like '%negative%' AND 
                  (   trb.itemname like '%_rf_train%' OR 
                      trb.itemname like '%_rf_display%')
                )
              )
      THEN 'PASSED'

      WHEN  trb.evaluation_function IS NULL AND 
            ( trb.itemname like 'dt%' OR 
              trb.itemname like 'rf%' OR 
              trb.itemname like 'ar%'
            ) AND 
            trb.itemname like '%negative%' AND 
            ( tr.issuccessful = trb.issuccessful OR 
              substr(trb.result_info,1,80) = substr(tr.result_info,1,80) OR 
              tr.result_info like '%invalid input syntax for type double%' OR 
              tr.result_info like '%each feature in feature_col_names must be a column%' OR 
              tr.result_info like '%each feature in continuous_feature_names must be in the feature_col_names%')
      THEN 'PASSED'

      WHEN  trb.evaluation_function IS NULL AND 
            trb.issuccessful = false AND 
            tr.issuccessful = false
      THEN 'PASSED'

      WHEN  trb.evaluation_function IS NULL AND 
            trb.result_info <> tr.result_info
      THEN 'FAILED : Expected result not matched'

      WHEN  ( trb.itemname not like 'rf%' AND 
              trb.itemname not like '%cross_validate%'  AND 
              trb.itemname not like 'svm%'  AND 
              trb.itemname not like 'multinomia%' AND 
              ( trb.evaluation_function IS NOT NULL AND 
                ( (trb.evaluation_function - tr.evaluation_function) between 
                    -0.0001 AND 0.0001
                )
              )
            ) OR 
            ( ( trb.itemname like 'rf%' OR  
                trb.itemname like '%cross_validate%' OR 
                trb.itemname  like 'multinomia%'
              ) AND 
              ( trb.evaluation_function IS NOT NULL AND 
                (tr.evaluation_function / trb.evaluation_function) between 
                    0.7 AND 1.3 
              )
            ) OR 
            ( trb.itemname like 'svm%' AND 
              ( trb.evaluation_function IS NOT NULL AND 
                (tr.evaluation_function / trb.evaluation_function) between 
                    0.0000001 AND 10000000 
              )
            ) OR 
            ( trb.evaluation_function IS NULL AND 
              trb.result_info = tr.result_info
            )
      THEN 'PASSED'


      WHEN  trb.itemname not like 'rf%' AND 
            trb.itemname not like '%cross_validate%' AND 
            trb.itemname not like 'svm%'  AND 
            trb.itemname not like 'multinomia%' AND 
            trb.evaluation_function IS NOT NULL AND 
            (trb.evaluation_function - tr.evaluation_function) < 0.0001
      THEN 'PASSED : Evaluation function such as score, gof increased: baseline is '::text  || 
            ((trb.evaluation_function)::decimal(6,5))::text  || 
            ' and runtime is '::text  || 
            ((tr.evaluation_function)::decimal(6,5))::text

      WHEN  ( trb.itemname like 'rf%' OR  
              trb.itemname like '%cross_validate%' OR 
              trb.itemname  like 'multinomia%'
            ) AND 
            trb.evaluation_function IS NOT NULL AND 
            (tr.evaluation_function / trb.evaluation_function) > 1.3
      THEN 'PASSED : Evaluation function of random forest increased: baseline is '::text  || 
            ((trb.evaluation_function)::decimal(6,5))::text  || 
            ' and runtime is '::text  || 
            ((tr.evaluation_function)::decimal(6,5))::text

      WHEN  trb.itemname like 'svm%' AND 
            trb.evaluation_function IS NOT NULL AND 
            (tr.evaluation_function / trb.evaluation_function) > 10000000
      THEN 'PASSED : Evaluation function of svm increased: baseline is '::text  || 
            (trb.evaluation_function)::text  || 
            ' and runtime is '::text  || (tr.evaluation_function)::text

      ELSE 'CASES NEED TO BE INVESTIGATE'
 END AS testresult,
      tr.resultlocation as platform,
      tr.elapsedtime as runtime,
      trb.elapsedtime as basetime,
      tr.starttimestamp,
      tr.result_info as trresult,
     trb.result_info as trbresult

 FROM testitemresult as tr
      FULL JOIN
        testitemresultbaseline as trb
      ON trb.itemname = tr.itemname
      FULL JOIN
      testitems as ti
      ON tr.itemname = ti.itemname

ORDER BY runid);


 CREATE OR REPLACE VIEW  summaryreport AS
(SELECT runid, suitename, casename, platform,
        CASE WHEN bool_and(testresult like 'PASSED%')
              THEN 'PASSED'
              WHEN  bool_or(testresult like 'FAILED%')
              THEN  'FAILED'
              WHEN  bool_and (testresult in('SKIPPED', 'NEW CASES'))
              THEN 'SKIPPED'
              ELSE 'ERROR'
        END AS testresult,
        sum(runtime) as elapsedtime,
        min(starttimestamp) as starttimestamp
FROM testresultreport
GROUP BY runid, suitename, casename, platform);


CREATE OR REPLACE VIEW performancedetailreport AS
(SELECT runid, suitename, casename, itemname, testresult,
 CASE WHEN testresult like 'PASSED%'
 THEN
      CASE WHEN itemname like '%c45_clean%' OR 
                basetime < 5000 OR 
                runtime < 5000 OR itemname like 'kmeans_random%'
      THEN 'Not justification functions in performance evaluation'

      WHEN  basetime::float8 < 10000 AND 
            ((runtime::float8 / basetime::float8) between 0.3 AND 3) OR 
            ( (basetime::float8 BETWEEN 10000 AND 180000) AND 
              ((runtime::float8 / basetime::float8) between 0.7 AND 1.3)
            ) OR 
            ( basetime::float8 >= 120000 AND 
              ((runtime::float8 / basetime::float8) between 0.9 AND 1.1)
            )
      THEN 'PERFORMANCE No regression: base time is ' || (basetime/1000)::text || 
            ' seconds AND run time is ' || (runtime/1000)::text || ' seconds'

       WHEN ( basetime::float8 < 10000  AND 
              ((runtime::float8 / basetime::float8)  <  0.3 )
            ) OR 
            ( (basetime::float8 BETWEEN 10000 AND 180000) AND 
              ((runtime::float8 / basetime::float8)  <  0.7 )
            ) OR 
            ( basetime::float8 > 180000  AND 
              ((runtime::float8 / basetime::float8)  <  0.9 )
            )
       THEN 'PERFORMANCE BETTER: base time is ' || (basetime/1000)::text || 
            ' seconds AND run time is ' || (runtime/1000)::text || ' seconds'

       WHEN ( basetime::float8 < 5000  AND 
              ((runtime::float8 / basetime::float8)  > 3 )
            ) OR 
            ( (basetime::float8 BETWEEN 10000 AND 180000) AND 
              ((runtime::float8 / basetime::float8)  > 1.3)
            ) OR 
            ( basetime::float8 > 180000  AND 
              ((runtime::float8 / basetime::float8)  > 1.1)
            )
       THEN 'PERFORMANCE WORSE: base time is ' || (basetime/1000)::text || 
            ' seconds AND run time is ' || (runtime/1000)::text || ' seconds'
       ELSE 'PERFORMANCE UNKNOWN'
       END
  ELSE 'PERFORMANCE UNKNOWN'
  END AS perf_status,
      platform,
      runtime as elapsedtime,
      starttimestamp
 FROM testresultreport
 ORDER BY runid);


CREATE OR REPLACE VIEW failedcases as
SELECT casename,
       itemname,
       command,
       trresult,
       trbresult,
       starttimestamp
FROM testresultreport
WHERE runid = ( SELECT max(testitemseq.runid) FROM testitemseq)
 AND casename IN ( SELECT DISTINCT testresultreport.casename
                          FROM testresultreport
                          WHERE testresult  LIKE 'FAILED%'::text
                           AND itemname NOT LIKE '%negative%'::text
                           AND runid = ( SELECT max(testitemseq.runid)
                                          FROM testitemseq ))
            AND itemname NOT LIKE '%negative%'::text
UNION
SELECT  casename,
        itemname,
        command,
        trresult,
        trbresult,
        starttimestamp
  FROM testresultreport
  WHERE runid = ( SELECT max(testitemseq.runid) FROM testitemseq)
        AND testresult like 'FAILED%'
        AND testresultreport.itemname LIKE '%negative%'::text;


CREATE OR REPLACE VIEW featuretestsummary
AS
SELECT suitename, testresult, count(*)
FROM summaryreport
WHERE runid = (SELECT MAX(runid) from testitemseq)
GROUP BY  suitename, testresult;

CREATE OR REPLACE VIEW performancesummary
AS
SELECT suitename, substr(perf_status, 1, position(':' in perf_status) - 1) 
          AS perfstatus, count(*)
FROM performancedetailreport
WHERE runid = (SELECT MAX(runid) from testitemseq)
AND   position(':' in perf_status) > 0
GROUP BY  suitename, substr(perf_status, 1, position(':' in perf_status) -1);

CREATE OR REPLACE VIEW skippedcases
AS
SELECT COUNT(*) AS failedcases,
       jc.jiraid as jiraid,
       algorithmic,
       CASE WHEN j.jiratype = 1 THEN 'V0.5'
            WHEN j.jiratype = 2 THEN 'MASTER'
            WHEN j.jiratype = 999 THEN 'QA Backlog'
            WHEN j.jiratype = 1000 THEN 'GPDB'
           ELSE 'ERROR TYPE' END  AS fixversion,
       j.jiradescription
FROM jiras_cases as jc,
             madlib_jiras as j,
             (SELECT distinct algorithmic, casename from testitemresult AS tr, 
                              testitems AS ti
              WHERE runid = (select max(runid) from testitemseq) AND 
                    issuccessful IS NULL AND 
                    tr.itemname = ti.itemname
              ) AS tr
WHERE j.jiraid = jc.jiraid AND 
      tr.casename = jc.casename
GROUP BY  jc.jiraid, j.jiratype, algorithmic, j.jiradescription;

